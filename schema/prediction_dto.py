from enum import Enum

from pydantic import BaseModel, Field, model_validator, validator, field_validator


class PredictionDTO(BaseModel):
    average_complexity: float = Field(..., ge=0, le=5)
    average_rating: float = Field(..., ge=0, le=10)
    popularity_score: float = Field(..., ge=0, le=10)


class Domain(str, Enum):
    strategy_games = "Strategy Games"
    thematic_games = "Thematic Games"
    wargames = "Wargames"
    family_games = "Family Games"
    customizable_games = "Customizable Games"
    abstract_games = "Abstract Games"
    party_games = "Party Games"
    childrens_games = "Children's Games"


class Mechanic(str, Enum):
    acting = "Acting"
    action_drafting = "Action Drafting"
    action_points = "Action Points"
    action_queue = "Action Queue"
    action_retrieval = "Action Retrieval"
    action_timer = "Action Timer"
    action_event = "Action/Event"
    advantage_token = "Advantage Token"
    alliances = "Alliances"
    area_majority_influence = "Area Majority / Influence"
    area_movement = "Area Movement"
    area_impulse = "Area-Impulse"
    auction_bidding = "Auction/Bidding"
    auction_dexterity = "Auction: Dexterity"
    auction_dutch = "Auction: Dutch"
    auction_dutch_priority = "Auction: Dutch Priority"
    auction_english = "Auction: English"
    auction_fixed_placement = "Auction: Fixed Placement"
    auction_once_around = "Auction: Once Around"
    auction_sealed_bid = "Auction: Sealed Bid"
    auction_turn_order_until_pass = "Auction: Turn Order Until Pass"
    automatic_resource_growth = "Automatic Resource Growth"
    betting_and_bluffing = "Betting and Bluffing"
    bias = "Bias"
    bingo = "Bingo"
    bribery = "Bribery"
    campaign_battle_card_driven = "Campaign / Battle Card Driven"
    card_drafting = "Card Drafting"
    card_play_conflict_resolution = "Card Play Conflict Resolution"
    catch_the_leader = "Catch the Leader"
    chaining = "Chaining"
    chit_pull_system = "Chit-Pull System"
    closed_economy_auction = "Closed Economy Auction"
    command_cards = "Command Cards"
    commodity_speculation = "Commodity Speculation"
    communication_limits = "Communication Limits"
    connections = "Connections"
    constrained_bidding = "Constrained Bidding"
    contracts = "Contracts"
    cooperative_game = "Cooperative Game"
    crayon_rail_system = "Crayon Rail System"
    critical_hits_and_failures = "Critical Hits and Failures"
    cube_tower = "Cube Tower"
    deck_bag_and_pool_building = "Deck Bag and Pool Building"
    deck_construction = "Deck Construction"
    deduction = "Deduction"
    delayed_purchase = "Delayed Purchase"
    dice_rolling = "Dice Rolling"
    die_icon_resolution = "Die Icon Resolution"
    different_dice_movement = "Different Dice Movement"
    different_worker_types = "Different Worker Types"
    drafting = "Drafting"
    elapsed_real_time_ending = "Elapsed Real Time Ending"
    enclosure = "Enclosure"
    end_game_bonuses = "End Game Bonuses"
    events = "Events"
    finale_ending = "Finale Ending"
    flicking = "Flicking"
    follow = "Follow"
    force_commitment = "Force Commitment"
    grid_coverage = "Grid Coverage"
    grid_movement = "Grid Movement"
    hand_management = "Hand Management"
    hexagon_grid = "Hexagon Grid"
    hidden_movement = "Hidden Movement"
    hidden_roles = "Hidden Roles"
    hidden_victory_points = "Hidden Victory Points"
    highest_lowest_scoring = "Highest-Lowest Scoring"
    hot_potato = "Hot Potato"
    i_cut_you_choose = "I Cut You Choose"
    impulse_movement = "Impulse Movement"
    income = "Income"
    increase_value_of_unchosen_resources = "Increase Value of Unchosen Resources"
    induction = "Induction"
    interrupts = "Interrupts"
    investment = "Investment"
    kill_steal = "Kill Steal"
    king_of_the_hill = "King of the Hill"
    ladder_climbing = "Ladder Climbing"
    layering = "Layering"
    legacy_game = "Legacy Game"
    line_drawing = "Line Drawing"
    line_of_sight = "Line of Sight"
    loans = "Loans"
    lose_a_turn = "Lose a Turn"
    mancala = "Mancala"
    map_addition = "Map Addition"
    map_deformation = "Map Deformation"
    map_reduction = "Map Reduction"
    market = "Market"
    matching = "Matching"
    measurement_movement = "Measurement Movement"
    melding_and_splaying = "Melding and Splaying"
    memory = "Memory"
    minimap_resolution = "Minimap Resolution"
    modular_board = "Modular Board"
    move_through_deck = "Move Through Deck"
    movement_points = "Movement Points"
    movement_template = "Movement Template"
    moving_multiple_units = "Moving Multiple Units"
    multiple_maps = "Multiple Maps"
    multiple_lot_auction = "Multiple-Lot Auction"
    narrative_choice_paragraph = "Narrative Choice / Paragraph"
    negotiation = "Negotiation"
    network_and_route_building = "Network and Route Building"
    once_per_game_abilities = "Once-Per-Game Abilities"
    order_counters = "Order Counters"
    ownership = "Ownership"
    paper_and_pencil = "Paper-and-Pencil"
    passed_action_token = "Passed Action Token"
    pattern_building = "Pattern Building"
    pattern_movement = "Pattern Movement"
    pattern_recognition = "Pattern Recognition"
    physical_removal = "Physical Removal"
    pickup_and_deliver = "Pick-up and Deliver"
    pieces_as_map = "Pieces as Map"
    player_elimination = "Player Elimination"
    player_judge = "Player Judge"
    point_to_point_movement = "Point to Point Movement"
    predictive_bid = "Predictive Bid"
    prisoners_dilemma = "Prisoner's Dilemma"
    programmed_movement = "Programmed Movement"
    push_your_luck = "Push Your Luck"
    race = "Race"
    random_production = "Random Production"
    ratio_combat_results_table = "Ratio / Combat Results Table"
    rerolling_and_locking = "Re-rolling and Locking"
    real_time = "Real-Time"
    relative_movement = "Relative Movement"
    resource_to_move = "Resource to Move"
    rock_paper_scissors = "Rock-Paper-Scissors"
    role_playing = "Role Playing"
    roles_with_asymmetric_information = "Roles with Asymmetric Information"
    roll_spin_and_move = "Roll / Spin and Move"
    rondel = "Rondel"
    scenario_mission_campaign_game = "Scenario / Mission / Campaign Game"
    score_and_reset_game = "Score-and-Reset Game"
    secret_unit_deployment = "Secret Unit Deployment"
    selection_order_bid = "Selection Order Bid"
    semi_cooperative_game = "Semi-Cooperative Game"
    set_collection = "Set Collection"
    simulation = "Simulation"
    simultaneous_action_selection = "Simultaneous Action Selection"
    singing = "Singing"
    single_loser_game = "Single Loser Game"
    slide_push = "Slide/Push"
    solo_solitaire_game = "Solo / Solitaire Game"
    speed_matching = "Speed Matching"
    square_grid = "Square Grid"
    stacking_and_balancing = "Stacking and Balancing"
    stat_check_resolution = "Stat Check Resolution"
    static_capture = "Static Capture"
    stock_holding = "Stock Holding"
    storytelling = "Storytelling"
    sudden_death_ending = "Sudden Death Ending"
    take_that = "Take That"
    targeted_clues = "Targeted Clues"
    team_based_game = "Team-Based Game"
    tech_trees_tech_tracks = "Tech Trees / Tech Tracks"
    three_dimensional_movement = "Three Dimensional Movement"
    tile_placement = "Tile Placement"
    time_track = "Time Track"
    track_movement = "Track Movement"
    trading = "Trading"
    traitor_game = "Traitor Game"
    trick_taking = "Trick-taking"
    tug_of_war = "Tug of War"
    turn_order_auction = "Turn Order: Auction"
    turn_order_claim_action = "Turn Order: Claim Action"
    turn_order_pass_order = "Turn Order: Pass Order"
    turn_order_progressive = "Turn Order: Progressive"
    turn_order_random = "Turn Order: Random"
    turn_order_role_order = "Turn Order: Role Order"
    turn_order_stat_based = "Turn Order: Stat-Based"
    variable_phase_order = "Variable Phase Order"
    variable_player_powers = "Variable Player Powers"
    variable_setup = "Variable Set-up"
    victory_points_as_a_resource = "Victory Points as a Resource"
    voting = "Voting"
    worker_placement = "Worker Placement"
    worker_placement_with_dice_workers = "Worker Placement with Dice Workers"
    zone_of_control = "Zone of Control"



class BoardGameDTO(BaseModel):
    year_published: int = Field(..., ge=-3600, lt=2030)
    min_players: int = Field(..., ge=1, le=8)
    max_players: int = Field(..., ge=1, le=100)
    play_time: int = Field(..., gt=0, lt=660)
    min_age: int = Field(..., ge=2, le=21)
    mechanics: list[Mechanic]
    domains: list[Domain]

    @field_validator("max_players", mode="before")
    def validate_max_players(cls, max_players, info):
        min_players = info.data.get("min_players")  # Access `min_players` from the model's context
        if min_players is not None and max_players < min_players:
            raise ValueError("max_players must be greater than or equal to min_players")
        return max_players